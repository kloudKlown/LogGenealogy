// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['modules/clean/image_viewer_annotation_interface', 'modules/clean/image_viewer_annotation_renderer', 'modules/clean/gandalf_util'], function(ImageViewerAnnotationInterface, ImageViewerAnnotationRenderer, GandalfUtil) {
  var ImageAnnotations;
  return ImageAnnotations = (function() {
    function ImageAnnotations() {
      this._handleMessage = bind(this._handleMessage, this);
    }

    ImageAnnotations.prototype.onImageLoad = function($imageContainer, $image) {
      this.reset();
      this.$imageContainer = $imageContainer;
      this.$image = $image;
      this.isImagePreviewAnnotationCreationEnabled = GandalfUtil.getGandalfRule("dw-comments-annotation-image-previews");
      return this._prepareAnnotations();
    };

    ImageAnnotations.prototype._prepareAnnotations = function() {
      if (this.isImagePreviewAnnotationCreationEnabled) {
        this._prepareAnnotationInterface();
      }
      this.annotationRenderer = new ImageViewerAnnotationRenderer();
      window.addEventListener('resize', this._onResize);
      window.addEventListener('message', this._handleMessage);
      return this._postPageRendered();
    };

    ImageAnnotations.prototype._prepareAnnotationInterface = function() {
      this.annotationInterface = new ImageViewerAnnotationInterface();
      this.$image.off("click");
      return this.$imageContainer.on('mousedown.annotation', this.annotationInterface.onMouseDownCallback).on('mouseup.annotation', this.annotationInterface.onMouseUpCallback).on('mousemove.annotation', this.annotationInterface.onMouseMoveCallback);
    };

    ImageAnnotations.prototype._handleMessage = function(message) {
      var commentActivity, error, error1, messageJson, ref, ref1, ref2, ref3, ref4, ref5, ref6;
      try {
        messageJson = JSON.parse(message.data);
      } catch (error1) {
        error = error1;
        return;
      }
      switch (messageJson.action) {
        case "draw-annotation":
          return (ref = this.annotationRenderer) != null ? ref.renderAnnotation(messageJson.parameters) : void 0;
        case "remove-annotation":
          commentActivity = messageJson.parameters.commentActivity;
          return (ref1 = this.annotationRenderer) != null ? ref1.removeAnnotation(commentActivity) : void 0;
        case "remove-all-annotations":
          return (ref2 = this.annotationRenderer) != null ? ref2.removeAllAnnotations() : void 0;
        case "enable-annotation-creation":
          return (ref3 = this.annotationInterface) != null ? ref3.enableAnnotations() : void 0;
        case "disable-annotation-creation":
          return (ref4 = this.annotationInterface) != null ? ref4.disableAnnotations() : void 0;
        case "hide-annotation":
          return (ref5 = this.annotationInterface) != null ? ref5.onHideAnnotation() : void 0;
        case "scroll-to-annotation":
          commentActivity = messageJson.parameters.commentActivity;
          return (ref6 = this.annotationRenderer) != null ? ref6.highlightAnnotation(commentActivity) : void 0;
        case "file-feedback-ui-ready":
          return this._postPageRendered();
      }
    };

    ImageAnnotations.prototype._postPageRendered = function() {
      return window.postMessage(JSON.stringify({
        "action": "page-rendered"
      }), '*');
    };

    ImageAnnotations.prototype._onResize = function() {
      var ref;
      if ((ref = this.annotationRenderer) != null) {
        ref.removeAllAnnotations();
      }
      window.postMessage(JSON.stringify({
        "action": "scale-change"
      }), '*');
      clearTimeout(this.scaleChangeTimer);
      return this.scaleChangeTimer = setTimeout((function(_this) {
        return function() {
          var ref1;
          _this._postPageRendered();
          return (ref1 = _this.annotationInterface) != null ? ref1.onScaleChangeCallback() : void 0;
        };
      })(this), 100);
    };

    ImageAnnotations.prototype.reset = function() {
      var ref, ref1, ref2;
      if ((ref = this.annotationRenderer) != null) {
        ref.reset();
      }
      if (this.isImagePreviewAnnotationCreationEnabled) {
        if ((ref1 = this.annotationInterface) != null) {
          ref1.reset();
        }
        if ((ref2 = this.$imageContainer) != null) {
          ref2.off('mousedown.annotation').off('mouseup.annotation').off('mousemove.annotation');
        }
      }
      window.removeEventListener('resize', this._onResize);
      return window.removeEventListener('message', this._handleMessage);
    };

    return ImageAnnotations;

  })();
});

//# sourceMappingURL=image_annotations.js.map
